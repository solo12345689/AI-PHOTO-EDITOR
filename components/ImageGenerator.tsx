
import React, { useState } from 'react';
import { generateImage } from '../services/geminiService';
import { DownloadIcon, ArrowPathIcon, SparklesIcon } from './IconComponents';

export const ImageGenerator: React.FC = () => {
  const [prompt, setPrompt] = useState('');
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleGenerate = async () => {
    if (!prompt.trim()) return;
    setIsLoading(true);
    setError(null);
    setGeneratedImage(null);
    try {
      const base64Data = await generateImage(prompt);
      setGeneratedImage(`data:image/jpeg;base64,${base64Data}`);
    } catch (e) {
      setError(e instanceof Error ? e.message : 'An unknown error occurred.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownload = () => {
    if (!generatedImage) return;
    const link = document.createElement('a');
    link.href = generatedImage;
    link.download = 'generated-image.jpg';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  const handleReset = () => {
      setPrompt('');
      setGeneratedImage(null);
      setError(null);
      setIsLoading(false);
  }

  if (isLoading) {
    return (
       <div className="w-full max-w-2xl text-center bg-gray-800 border-2 border-dashed border-gray-600 rounded-xl p-12 flex flex-col items-center justify-center min-h-[384px]">
            <div className="w-12 h-12 border-4 border-t-transparent border-cyan-400 rounded-full animate-spin"></div>
            <p className="mt-4 text-lg font-semibold text-gray-300">Generating your masterpiece...</p>
       </div>
    );
  }

  if (error) {
     return (
        <div className="w-full max-w-2xl text-center bg-gray-800 border border-red-500/50 rounded-xl p-12 flex flex-col items-center justify-center min-h-[384px]">
            <div className="flex flex-col items-center justify-center space-y-4">
                <p className="text-lg font-semibold text-red-400">Generation Failed</p>
                <p className="text-sm text-gray-400 max-w-md">{error}</p>
                <button onClick={handleReset} className="mt-4 px-6 py-2 bg-cyan-600 text-white font-semibold rounded-lg shadow-md hover:bg-cyan-700 transition-all">
                    Try Again
                </button>
            </div>
        </div>
     )
  }
  
  if (generatedImage) {
      return (
        <div className="w-full max-w-2xl text-center space-y-4">
             <div className="bg-gray-800 rounded-xl border border-gray-700 overflow-hidden">
                <img src={generatedImage} alt="Generated by AI" className="w-full h-auto object-contain" />
             </div>
             <div className="flex items-center justify-center space-x-4">
                <button onClick={handleReset} className="flex items-center space-x-2 px-4 py-2 bg-gray-700 text-white font-semibold rounded-lg hover:bg-gray-600 transition-colors">
                    <ArrowPathIcon className="w-5 h-5" />
                    <span>Generate Another</span>
                </button>
                <button onClick={handleDownload} className="flex items-center space-x-2 px-4 py-2 bg-cyan-600 text-white font-semibold rounded-lg hover:bg-cyan-700 transition-colors">
                    <DownloadIcon className="w-5 h-5" />
                    <span>Download</span>
                </button>
             </div>
        </div>
      )
  }

  return (
    <div className="w-full max-w-2xl text-center">
      <div className="bg-gray-800 border-2 border-dashed border-gray-600 rounded-xl p-12 space-y-6 hover:border-cyan-500 transition-colors duration-300">
        <div className="flex flex-col items-center justify-center space-y-4">
            <div className="bg-gray-700 p-4 rounded-full">
                <SparklesIcon className="w-12 h-12 text-cyan-400" />
            </div>
            <p className="text-lg font-semibold text-white">Describe the image you want to create</p>
        </div>
        <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., A cute cat astronaut floating in space, cinematic, 4k"
            className="w-full h-28 p-3 bg-gray-900 border border-gray-600 rounded-md focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 transition-colors text-sm text-gray-200 resize-none"
        />
        <button
            onClick={handleGenerate}
            disabled={!prompt.trim()}
            className="w-full px-6 py-3 bg-cyan-600 text-white font-bold rounded-lg shadow-md hover:bg-cyan-700 transition-all disabled:bg-gray-600 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
        >
            <SparklesIcon className="w-5 h-5" />
            <span>Generate Image</span>
        </button>
      </div>
    </div>
  );
};
